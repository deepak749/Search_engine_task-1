// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/module_page/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// PageService is an autogenerated mock type for the PageService type
type PageService struct {
	mock.Mock
}

// AddPage provides a mock function with given fields: _a0
func (_m *PageService) AddPage(_a0 *models.Page) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Page) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPages provides a mock function with given fields:
func (_m *PageService) GetAllPages() ([]*models.Page, error) {
	ret := _m.Called()

	var r0 []*models.Page
	if rf, ok := ret.Get(0).(func() []*models.Page); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPageService creates a new instance of PageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPageService(t mockConstructorTestingTNewPageService) *PageService {
	mock := &PageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
